/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(left==right)
        {
            return head;
        }
        int i=0,count=0;
        ListNode* temp1;
        temp1=head;
        while(temp1!=0)
        {
            temp1=temp1->next;
            count++;
        }
        temp1=head;
        while(i<left-2)
        {
            temp1=temp1->next;
            i++;
        }
        i=0;
        ListNode* temp2;
        temp2=head;
        while(i<right-1)
        {
            temp2=temp2->next;
            i++;
        }
        ListNode* temp;
        ListNode *p,*q;
        if(left==1)
        {
            if(right==count)
            {
                temp=head;
                p=q=temp->next;
                temp->next=NULL;
                while(p!=NULL)
                {
                     q=q->next;
            p->next=temp;
            temp=p;
            p=q;
                }
                return temp;
            }
            else
            {
                temp=head;
                p=q=temp->next;
        temp->next=temp2->next;
        while(temp!=temp2)
        {
            q=q->next;
            p->next=temp;
            temp=p;
            p=q;
        }
        return temp;
            }
        }
        else
        {
        temp=temp1->next;
        p=q=temp->next;
        temp->next=temp2->next;
        while(temp!=temp2)
        {
            q=q->next;
            p->next=temp;
            temp=p;
            p=q;
        }
        temp1->next=temp2;
        return head;
        }
        return head;
    }
};
